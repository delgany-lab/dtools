#!/usr/bin/python

import argparse
import subprocess
import sys
import os

# To build only dependent Dockerfile stages instead all of them
os.environ["DOCKER_BUILDKIT"] = "1"

parser = argparse.ArgumentParser()

subparsers = parser.add_subparsers(dest="command")

build = subparsers.add_parser("build", help="Builds a new dev image")
build.add_argument(
    "--type",
    type=str,
    choices=["esp32", "lab", "gcloud", "flutter", "cpp"],
    help="Type of a container",
    required=True,
)
build.add_argument("name", help="Name of a container", nargs="?")

shell = subparsers.add_parser("shell", help="Shells into a container")
shell.add_argument("name", help="Name of the container")
shell.add_argument("-c", help="Command to run")
shell.add_argument(
    "--docker-run-args", type=str, help="Native docker run commands", required=False
)
delete = subparsers.add_parser("delete", help="Stop and delete a container")
delete.add_argument("name", help="Name of the container")

args = parser.parse_args()

if args.name is None:
    args.name = args.type

if args.command == "build":
    p = subprocess.run(f"docker image inspect {args.name}", shell=True, capture_output=True)
    if p.returncode == 0:
        sys.exit(f'Image "{args.name}" already exists')
    p = subprocess.run(
        f"docker buildx build --load --target {args.type} -t {args.name} "
        f"--build-arg USER=$(whoami) "
        f"--build-arg UID=$(id -u) --build-arg GID=$(id -g) "
        f"-f docker/Dockerfile ./docker",
        shell=True,
    )
elif args.command == "shell":
    p = subprocess.run(
        "docker container inspect -f '{{.State.Running}}' "
        f"{args.name}",
        shell=True, capture_output=True)
    if p.returncode != 0:
        cmd = (
            f"docker run -id -h {args.name} -P "
            "--privileged --device=/dev/bus -v /dev:/dev "
            f"-v $HOME:$HOME "
        )
        if args.docker_run_args:
            cmd += f"{args.docker_run_args} "
        cmd += f"--name {args.name} {args.name} "
        p = subprocess.run(cmd, shell=True, capture_output=True)
        if p.returncode != 0:
            sys.exit(f"{p.stderr}")
    else:
        subprocess.run(f"docker start {args.name}", shell=True, capture_output=True)
    cmd = f"docker exec -e HISTFILE=/tmp/.bash_history -it {args.name} /bin/bash"
    if args.c:
        cmd += f" -c '{args.c}'"
    subprocess.run(cmd, shell=True)
elif args.command == "delete":
    p = subprocess.run(
        f"docker container stop {args.name}; docker rm {args.name}",
        shell=True)

